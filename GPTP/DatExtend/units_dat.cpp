#include <SCBW/api.h>
#include <hook_tools.h>
#include "datext.h"

// scbwdata modified by DatExt
DATEXT_VAR_REF(UNITDEATHS*, deathTable_var);
DATEXT_VAR_REF(UNITDEATHS*, unitAllCountTable_var);
DATEXT_VAR_REF(UNITDEATHS*, unitCompleteTable_var);
DATEXT_VAR_REF(UNITDEATHS*, unitKilledTable_var);
DATEXT_VAR_REF(BUTTON_SET*, buttonSetTable_var);
DATEXT_VAR_REF(UnitStatFuncArrayEntry*, unitStatFuncs_var);
DATEXT_VAR_REF(AI_Main*, AIScriptController_var); // TODO: fix
DATEXT_VAR_REF(u32*, aiStrength_var);
DATEXT_VAR_REF(_uavail*, UnitAvailability_var);

namespace {

// List of address reference replacements.
s32 unit_r[] = {
/* Graphics */      //  0,   0x00454317 +3, 0x00463A71 +3, 0x004683C6 +3, 0x0047B854 +3, 0x0047B8A4 +3, 0x0047B8F4 +3, 0x0048D756 +3, 0x0048DA8A +3, 0x00497148 +3, 0x0049ED0B +3, 0x004E9A10 +3,  0,
                    //  1,   0x0049716F +3,  0,
                    //  2,   0x00497196 +3,  0,
                    //  3,   0x004971BD +3,  0,
                    //  4,   0x004971E4 +3,  0,
                    //  5,   0x0049720B +3,  0,
                    //  0,
                      0,0,0, // Patched by Flingy Expand
/* Subunut 1 */       0,    0x0049E030 +4, 0x004A005B +4, 0x004A0A55 +4, 0x00431124 +4, 0x004313EC +4, 0x00431463 +4, 0,
                      2*1,  0x0049E08C +4, 0,
                      2*2,  0x0049E0EB +4, 0,
                      2*3,  0x0049E148 +4, 0,
                      2*228, 0x004CABCD +3, 0x004CAD8D +3, 0, // CHK load
                      0,
/* Subunit 2 */       0,0,0, // Unused
/* Infestation */     0,   0x004EA541 +4, 0,
                      0,
/* Construction */    0,   0x0045DF25 +3, 0x004E662E +3, 0x004EA606 +3, 0,
                      0,
/* Direction */       0,   0x00464B37 +2, 0x00464C3F +2, 0x00464C5F +2, 0x004A02DC +2, 0,
                      0,
/* Shield Enable */   0,   0x00440647 +2, 0x00440800 +2, 0x00440A9A +2, 0x004413E7 +2, 0x004262B7 +2, 0x0042645A +2, 0x004026D4 +2, 0x00426CC7 +2, 0x00402714 +2, 0x0042781F +2, 0x004279F3 +2, 0x004566B4 +2, 0x00479777 +2, 0x004799B7 +2, 0x0047A841 +2, 0x0047B6A5 +2, 0x0048AD35 +2, 0x00492239 +2, 0x00493535 +2, 0x004C5A3D +2, 0x004D60BC +2, 0x004E6FC6 +2, 0x004EB0F4 +2, 0x004EC2C7 +2, 0x00431274 +2, 0x00431865 +2, 0,
                      0,
/* Shield amount */   0,   0x00426418 +4, 0x004264B7 +4, 0x0040271E +4, 0x004566C6 +4, 0x004566D9 +4, 0x004666E9 +4, 0x0047A958 +4, 0x0047B6B8 +4, 0x0047B6C1 +3, 0x0048AD61 +4, 0x004934B9 +4, 0x004934F7 +4, 0x0049356B +4, 0x00493EDB +4, 0x0049EDA4 +4, 0x004A020D +4, 0x004BF03D +1, 0x004BF3AD +1, 0x004C5A47 +4, 0x004CC1B7 +4, 0x004CD4BB +4, 0x004E516A +4, 0x004E5181 +4, 0x004E6FD4 +4, 0x004EB0FE +4, 0x004EC2D1 +4, 0x0043127E +4, 0x0043186F +4, 0,
                      2*73, 0x00465F71 +3, 0,
                      2*228, 0x004CABE7 +3, 0x004CADA7 +3, 0, // CHK load
                      0,
/* hit points */      0,   0x00401404 +3, 0x00440030 +3, 0x00402274 +3, 0x004263F0 +3, 0x004022C4 +3, 0x0040272A +3, 0x00456734 +3, 0x004567E7 +3, 0x0045D392 +3, 0x0045D6A0 +3, 0x0045D6A7 +3, 0x0045DD23 +3, 0x00462EEA +3, 0x00463584 +2, 0x00463CC8 +3, 0x00466D6C +3, 0x0046734A +3, 0x004673ED +3, 0x004676BB +3, 0x00467781 +3, 0x004677C2 +3, 0x0046780C +3, 0x0046785E +3, 0x0046797E +3, 0x00474DF8 +2, 0x00474E56 +2, 0x0047A877 +3, 0x0047A906 +3, 0x0047B195 +3, 0x0047C80D +3, 0x0048AD3D +3,
                             0x0049ECBF +3, 0x0049F228 +3, 0x0049F23B +3, 0x004A0197 +3, 0x004A0203 +3, 0x004A0521 +3, 0x004BF029 +1, 0x004BF396 +1, 0x004C7B7D +3, 0x004CCC4E +4, 0x004CD493 +4, 0x004E6096 +3, 0x004E6F88 +3, 0x004EA624 +2, 0x004EBDC8 +2, 0x004EC37C +2, 0x004F61E7 +3, 0x0043128A +3, 0x00433CB3 +3, 0,
                      4*73, 0x004664A4 +1, 0x004668C4 +1, 0,
                      4*106, 0x00402220 +1, 0,
                      4*228, 0x004CABD9 +2, 0x004CAD99 +2, 0, // CHK load
                      0,
/* elevation */       0,   0x00463EA2 +2, 0x004671BD +2, 0x00467B18 +2, 0x0046808A +2, 0x0047BC78 +2, 0x0047BF0D +2, 0x0047C007 +2, 0x0049EDFF +2, 0x0049EE8F +2, 0x004E9D28 +2, 0x004EA68C +2, 0,
                      0,
/* old movement */    0,   0x00440EFB +2, 0x0045DE0A +2, 0,
                      0,
/* rank/sublabel */   0,   0x0042F418 +2, 0x0049A3E3 +2, 0x0049A3F7 +2, 0,
                      0,
/* comp AI idle */    0,   0x0047CB6E +2, 0x0049FC53 +2, 0x004A28FE +2, 0x004A297D +2, 0x004E6843 +2, 0,
                      0,
/* human AI idle */   0,   0x0047CB3E +2, 0x00493B83 +2, 0x0049FC5E +2, 0x0049FC98 +2, 0x004A017A +2, 0x004A053F +3, 0x004A2012 +3, 0x004A2075 +3, 0x004F6214 +2, 0,
                      0,
/* return to idle */  0,   0x0045489A +2, 0x00454A6C +2, 0x00455157 +2, 0x004558D7 +3, 0x004558E7 +3, 0x0045600C +2, 0x0045D196 +2, 0x0045DBD2 +2, 0x0045DCCB +2, 0x0045DFFC +2, 0x0046372A +2, 0x00463783 +2, 0x004641C6 +2, 0x00464426 +2, 0x004646BA +2, 0x00464AAD +2, 0x00464CCD +2, 0x00464D48 +2, 0x00464F23 +2, 0x004651E2 +2, 0x004656CA +2, 0x0046599C +2, 0x00465BEC +2, 0x0046721B +2, 0x00467710 +2, 0x00467B32 +2, 0x00467F8B +2, 0x004680B3 +2, 0x0046811D +2, 0x00468CF2 +2, 0x004690A5 +2,
                             0x00469227 +2, 0x004692BD +2, 0x00469572 +2, 0x00469AB8 +2, 0x0042E3DD +2, 0x00475198 +2, 0x004751A4 +2, 0x0047538C +2, 0x004753CE +2, 0x00475462 +2, 0x00477E87 +2, 0x004786E0 +2, 0x0047891A +2, 0x004791EA +2, 0x0047944E +2, 0x0047BBFA +2, 0x0047BC88 +2, 0x0047BD05 +2, 0x0047BD9B +2, 0x0047BE62 +2, 0x0047BEB7 +2, 0x0047BF63 +2, 0x0047C0D4 +2, 0x0047C1D6 +2, 0x0047C797 +2, 0x0047C7F1 +2, 0x00492404 +2, 0x004924A2 +2, 0x0049283A +2, 0x00493973 +2, 0x00493A60 +2,
                             0x00493F44 +2, 0x00493FBC +2, 0x00493FE7 +2, 0x0049436C +2, 0x00494895 +2, 0x00494A9C +2, 0x004A1CE5 +2, 0x004A1D37 +2, 0x004C17E7 +2, 0x004E6B5D +2, 0x004E73E7 +2, 0x004E7611 +2, 0x004E7B94 +3, 0x004E7DFB +2, 0x004E803A +3, 0x004E8247 +2, 0x004E9663 +2, 0x004E9753 +2, 0x004E9D45 +2, 0x004E9E14 +2, 0x004EA270 +2, 0x004EA323 +2, 0x004EA3A9 +2, 0x004EA4B0 +2, 0x004EA733 +2, 0x004F69A1 +2, 0x004F6D20 +2, 0x004F6ED5 +2, 0x00493A96 +2, 0,
                      0,
/* attack unit */     0,   0x0043D050 +2, 0x0043D0AE +2, 0x00456027 +2, 0x00456287 +2, 0x004562A7 +2, 0x004657AF +2, 0x004751AF +2, 0x004751BB +2, 0x00476FE0 +2, 0x0047702E +2, 0x004776A2 +2, 0x00477891 +2, 0x00477C82 +2, 0x00478241 +2, 0x0047834E +2, 0x00478451 +2, 0x0047C02E +2, 0x0047C129 +2, 0x0047C2EF +2, 0x0047C371 +2, 0x0049AC5A +2, 0x0049AC91 +2, 0x004A1CAD +2, 0x004A1CD3 +2, 0x004A1D58 +2, 0x004F7032 +2, 0x004F704D +2, 0,
                      37,  0x0043D150 +1, 0x004770C4 +1, 0,
                      62,  0x00477BBF +2, 0,
                      63,  0x00477BA4 +2, 0,
                      105, 0x00466707 +1, 0,
                      117, 0x00466685 +2, 0,
                      0,
/* attack move */     0,   0x004751C6 +2, 0x004751D2 +2, 0x0049AC68 +2, 0x0049ACA0 +2, 0,
                      0,
/* ground weapon */   0,   0x00438FF9 +2, 0x004400E2 +2, 0x0044053A +2, 0x00440552 +2, 0x00442E47 +3, 0x00426CF6 +2, 0x00426D10 +2, 0x00426D4B +2, 0x00426DD1 +2, 0x00426DEA +2, 0x00462FBD +2, 0x00465EBF +3, 0x00466069 +2, 0x00475A20 +2, 0x00475AA6 +2, 0x00475ABE +2, 0x00475AE9 +2, 0x0047619A +2, 0x0047649A +2, 0x00476518 +2, 0x004768ED +2, 0x00476F32 +2, 0x00477C3A +2, 0x00478796 +2, 0x00479B67 +2, 0x00479D8F +2, 0x0047BB36 +2, 0x0047C5C6 +2, 0x0047C67A +2, 0x0049E043 +3, 0x0049E0A0 +3,
                             0x0049E0FF +3, 0x0049E15C +3, 0x004CAC42 +2, 0x004CAC4A +3, 0x004CAE02 +2, 0x004CAE0A +3, 0x0043133B +3, 0x00431486 +3, 0,
                      6,   0x00477B31 +3, 0,
                      31,  0x00477B38 +3, 0,
                      0,
/* ground hits */     0,0,0, // Unused
/* air weapon */      0,   0x0043900C +2, 0x00439022 +2, 0x0043AFC5 +2, 0x0043CFA2 +2, 0x004400C1 +2, 0x0044055B +2, 0x00440574 +2, 0x00426D6E +2, 0x00426D8C +2, 0x00426DB5 +2, 0x00426E10 +2, 0x004279DF +2, 0x00462F9C +2, 0x00466048 +2, 0x00475844 +2, 0x0047585C +2, 0x004761AD +2, 0x004761FE +2, 0x00476479 +2, 0x004764F7 +2, 0x00476836 +2, 0x004768CC +2, 0x00476EFA +2, 0x00477AD6 +2, 0x00477C19 +2, 0x00477E24 +2, 0x0047862E +2, 0x00478775 +2, 0x00478BB6 +2, 0x00479D9B +2, 0x0047BB15 +2,
                             0x0047C5A5 +2, 0x0047C659 +2, 0x0048B0BF +2, 0x00491C2B +2, 0x0049E069 +3, 0x0049E0C6 +3, 0x0049E125 +3, 0x0049E182 +3, 0x004CAC73 +2, 0x004CAC7B +3, 0x004CAE33 +2, 0x004CAE3B +3, 0x004D80D3 +2, 0x004E808D +3, 0x0043138B +3, 0x0043140F +3, 0x00431B0B +2, 0,
                      0,
/* air hits */        0,0,0, // Unused
/* ai internal */     0,   0x00437FA7 +2, 0x00438147 +2, 0x00462981 +2, 0x0046307E +2, 0,
                      0,
/* abil flags */      0,   0x00401214 +3, 0x00437F91 +3, 0x004380D1 +3, 0x00438136 +3, 0x004381E9 +3, 0x004383C9 +3, 0x004383F9 +3, 0x00438429 +3, 0x00438489 +3, 0x00438B5E +3, 0x00438BBB +3, 0x00439572 +3, 0x00439B94 +3, 0x0043A11A +3, 0x0043AA2D +3, 0x0043ADAE +3, 0x0043AEAB +3, 0x0043AEC2 +3, 0x0043B147 +3, 0x0043B6ED +3, 0x0043BCA1 +3, 0x0043C198 +3, 0x0043C6AF +3, 0x0043CA09 +3, 0x0043CCBF +3, 0x0043CF27 +3, 0x0043D0A4 +3, 0x0043D1F4 +3, 0x0043D5FF +3, 0x0043D947 +3, 0x0043E08C +3,
                             0x0043E8CA +3, 0x0043F353 +3, 0x0043F39E +3, 0x0043F845 +3, 0x0043F856 +3, 0x004248B8 +3, 0x004400A9 +3, 0x004402BC +3, 0x00440300 +3, 0x00424CD7 +3, 0x00424D37 +3, 0x00424D91 +3, 0x00440934 +3, 0x00440AF9 +3, 0x00440B5C +3, 0x00440D28 +3, 0x00441467 +3, 0x00441539 +3, 0x004417DB +3, 0x00441A7D +3, 0x00441B64 +3, 0x00441C1F +3, 0x00441C67 +3, 0x00441D54 +3, 0x00441DD5 +3, 0x0044207E +3, 0x00442144 +3, 0x00442198 +3, 0x00442365 +3, 0x004424D6 +3, 0x00425A3E +3,
                             0x00425BC6 +3, 0x00444699 +3, 0x00444CF0 +3, 0x00444D6B +3, 0x00444D7B +3, 0x00444DC9 +3, 0x004456C2 +3, 0x00445827 +3, 0x00445C14 +3, 0x00446504 +3, 0x00446604 +3, 0x004481CD +3, 0x0044845B +3, 0x004014E4 +3, 0x00402A3B +3, 0x0042908B +3, 0x0042910E +3, 0x00453317 +3, 0x004533E3 +3, 0x0045343D +3, 0x004535BD +3, 0x0042CE2A +3, 0x00454013 +3, 0x00454287 +3, 0x00454C97 +3, 0x00454E1A +3, 0x00454F50 +3, 0x00454FA7 +3, 0x004551B6 +3, 0x00455234 +3, 0x00455395 +3,
                             0x0042CF85 +3, 0x00455405 +3, 0x0045553B +3, 0x004557C7 +3, 0x004558B2 +3, 0x0045594F +3, 0x00455A96 +3, 0x00455B05 +3, 0x00455B50 +3, 0x00455D2E +3, 0x00455D75 +3, 0x00456F78 +3, 0x00458BFE +3, 0x004594B0 +3, 0x004030E8 +3, 0x00401D26 +3, 0x0045CEA6 +3, 0x0045CF33 +2, 0x0045D20B +3, 0x0045D32E +3, 0x0045D369 +3, 0x0045DD81 +3, 0x00403434 +3, 0x0045FE44 +3, 0x004608EA +3, 0x004609A2 +3, 0x00462EDA +3, 0x00462F84 +3, 0x0046348B +3, 0x0046354C +2, 0x00463B16 +3,
                             0x00463BCA +3, 0x00463BDE +3, 0x004649C7 +3, 0x004653E3 +3, 0x0046541B +3, 0x00466030 +3, 0x00466AC2 +3, 0x00466B7C +3, 0x004672A3 +3, 0x00467435 +3, 0x0046794F +3, 0x00468560 +3, 0x00468A7C +3, 0x00468DE8 +3, 0x0046A3D1 +3, 0x0046C361 +3, 0x0046D78A +3, 0x0046D91F +3, 0x0046D937 +3, 0x0046D94F +3, 0x0046D967 +3, 0x0046F138 +3, 0x0046F3D4 +3, 0x0046F750 +3, 0x00401D48 +3, 0x00473494 +3, 0x00473A3B +3, 0x00473BF6 +3, 0x00473FC7 +2, 0x004740CA +2, 0x004741B4 +2,
                             0x00474DE5 +2, 0x00474E31 +2, 0x00474E90 +3, 0x0047516D +3, 0x0047518A +3, 0x0047582C +3, 0x00475BC7 +3, 0x00475C8D +3, 0x00475D3D +3, 0x00475D52 +3, 0x00475D67 +3, 0x00475D7C +3, 0x00475D8E +3, 0x0047622D +3, 0x00476461 +3, 0x004764DE +3, 0x004768B4 +3, 0x00476D8D +3, 0x00476DFD +3, 0x00476E76 +3, 0x00477022 +3, 0x004774BB +3, 0x004776F0 +3, 0x0047770D +3, 0x0047772A +3, 0x0047776A +3, 0x004777CC +3, 0x00477C01 +3, 0x0047875D +3, 0x00478B9F +3, 0x00478D7B +3,
                             0x00478F09 +3, 0x004793C8 +3, 0x004794B9 +3, 0x00479578 +3, 0x00479613 +3, 0x00479819 +3, 0x00479BEF +3, 0x0047A9BA +3, 0x0047B724 +3, 0x0047B777 +3, 0x0047BAFD +3, 0x0047C58D +3, 0x0047C641 +3, 0x0047CB01 +3, 0x0042F377 +3, 0x00488B1E +3, 0x00488C14 +3, 0x00488C86 +3, 0x00488D6E +3, 0x0048A0A4 +3, 0x0048A0C9 +3, 0x0048BFA5 +3, 0x0048DFA6 +3, 0x0048DFB0 +3, 0x0048E196 +3, 0x0048E4A4 +3, 0x0048E768 +3, 0x0048F97E +3, 0x0048FAA4 +3, 0x0048FACD +3, 0x00491874 +3,
                             0x00491AF3 +3, 0x00491CE3 +3, 0x00491EB6 +3, 0x00491EE8 +3, 0x00491F22 +3, 0x00491F58 +3, 0x004920A7 +3, 0x00492420 +3, 0x004936B6 +3, 0x00493D67 +3, 0x0049416F +3, 0x004941BF +3, 0x0049428C +3, 0x0049441A +3, 0x00497136 +3, 0x00401DB0 +3, 0x00499A7F +3, 0x0049AE60 +3, 0x0049AE9D +3, 0x0049B6C4 +3, 0x0049B6DE +3, 0x0049CD37 +3, 0x0049D8AD +3, 0x0049E2D4 +3, 0x0049E516 +3, 0x0049E5E8 +3, 0x0049E678 +3, 0x0049E847 +3, 0x0049EC03 +3, 0x0049EC98 +3, 0x0049EE08 +3,
                             0x0049EE2A +3, 0x0049EE40 +3, 0x0049EE5C +3, 0x0049EEC7 +3, 0x0049EEF6 +3, 0x0049EF13 +3, 0x0049F111 +3, 0x0049F130 +3, 0x0049F334 +3, 0x0049FA4E +3, 0x0049FA97 +3, 0x0049FC6D +3, 0x0049FF29 +3, 0x004A008B +3, 0x004A024C +3, 0x004A046D +3, 0x004A04A8 +3, 0x004A0508 +3, 0x004A0647 +3, 0x004A0748 +3, 0x004A07E0 +3, 0x004A081B +3, 0x004A099F +3, 0x004A0B6B +3, 0x004A0B75 +3, 0x004A0D81 +3, 0x004A0EFD +3, 0x004A10C4 +3, 0x004A124D +3, 0x004A1D17 +3, 0x004A1FB1 +3,
                             0x004A21B2 +3, 0x004A26E8 +3, 0x004A287A +3, 0x004A2998 +3, 0x004A2A1B +3, 0x004A46B7 +3, 0x004A475F +2, 0x004A4817 +3, 0x004A4897 +2, 0x004A490A +2, 0x004A49AB +2, 0x004AB9B4 +3, 0x004C0090 +3, 0x004C1681 +3, 0x004C1AE4 +3, 0x004C1FC4 +3, 0x004C568E +3, 0x004C6ABD +3, 0x004C6C4C +3, 0x004C6C6D +3, 0x004C6FAE +3, 0x004C766C +3, 0x004C7D94 +3, 0x004C7DC6 +3, 0x004C7F31 +3, 0x004C7F97 +3, 0x004C80AB +3, 0x004C847F +3, 0x004C852A +3, 0x004C8748 +3, 0x004CBF71 +3,
                             0x004CCFF0 +3, 0x004CD3C5 +3, 0x004CD506 +3, 0x004D78BD +3, 0x004D9474 +3, 0x004E2FC0 +3, 0x004E31A3 +3, 0x004E31D4 +3, 0x004E3205 +3, 0x004E32A2 +3, 0x004E363C +3, 0x004E3965 +3, 0x004E39BA +3, 0x004E3A0F +3, 0x004E3B35 +3, 0x004E413F +3, 0x004E4C8C +3, 0x004E5C74 +3, 0x004E5D8D +3, 0x004E618D +3, 0x004E6264 +3, 0x004E6297 +3, 0x004E62F4 +3, 0x004E6467 +3, 0x004E64B4 +3, 0x004E6548 +3, 0x004E68AA +3, 0x004E6DE0 +3, 0x004E6E69 +3, 0x004E70D0 +3, 0x00401ED8 +3,
                             0x004E7450 +3, 0x004E7AB3 +3, 0x004E7E55 +3, 0x004E7F56 +3, 0x004EAA23 +3, 0x004EB4B8 +3, 0x004EBA9B +3, 0x004EBB8B +3, 0x004EBC74 +3, 0x004EBDB7 +2, 0x004EBDE4 +3, 0x004EC36B +2, 0x004EC3E3 +3, 0x004EC432 +3, 0x004ECF78 +3, 0x004ECFBD +3, 0x004F3A88 +3, 0x004F4207 +3, 0x004F43D8 +3, 0x004F442C +3, 0x004F44A9 +3, 0x004F4567 +3, 0x004F45F7 +3, 0x004F467F +3, 0x004F46C8 +3, 0x0041418B +3, 0x004F61D0 +3, 0x004F6269 +3, 0x004F6323 +3, 0x004F6460 +3, 0x004F64B6 +3,
                             0x004F6788 +3, 0x004F67C5 +3, 0x004F68E5 +3, 0x004F6D58 +3, 0x00430D80 +3, 0x00430E57 +3, 0x00430F1A +3, 0x0043150D +3, 0x00431534 +3, 0x00431707 +3, 0x00431EBD +3, 0x00431F0D +3, 0x00432764 +3, 0x004327D7 +3, 0x00432AEC +3, 0x00401F8C +3, 0x00433DD7 +3, 0x00434827 +3, 0x00434CB7 +3, 0x0043663C +3, 0x00436656 +3, 0,
                      1,   0x0043FBDA +3, 0x004444BC +3, 0x00488C5C +3, 0x0049CD23 +3, 0,
                      2,   0x004D608C +3, 0,
                      4,   0x0049715D +3, 0,
                      8,   0x00497184 +3, 0,
                      12,  0x004971AB +3, 0,
                      16,  0x004971D2 +3, 0,
                      20,  0x004971F9 +3, 0,
                      337, 0x0043FB21 +2, 0,
                      496, 0x0043AB25 +2, 0,
                      500, 0x0043EBEF +1, 0,
                      -4,  0x0043AC76 +3, 0, // ?
                      0,
/* target acquis */   0,   0x00476069 +3, 0x0047608B +3, 0x004760AD +3, 0x004760C8 +3, 0x004760FA +3, 0x0049E015 +1, 0x0049E050 +3, 0x0049E0AD +3, 0x0049E10C +3, 0x0049E169 +3, 0,
                      1,   0x0049E0E5 +2, 0,
                      2,   0x0049E01A +1, 0,
                      3,   0x0049E1A1 +2, 0,
                      0,
/* sight range */     0,   0x004430CF +3, 0x004E5BFD +3, 0,
                      0,
/* armor upgrade */   0,   0x004256D5 +3, 0x00425739 +4, 0x00426CA6 +2, 0x00453FCE +4, 0x00454039 +4, 0,
                      0,
/* unit size */       0,   0x00479A3C +3, 0,
                      0,
/* armor */           0,   0x00457858 +3, 0x00479A1C +3, 0x004BF051 +1, 0x004BF3C1 +1, 0,
                      228,  0x004CABF5 +2, 0x004CADB5 +2, 0, // CHK load
                      0,
/* right click */     0,   0x004243B3 +2, 0x004243CA +2, 0x00428D61 +2, 0x00428DC1 +2, 0x00428F52 +2, 0x0045567A +2, 0x00455781 +2, 0x00455A39 +2, 0x00456190 +2, 0x004635D4 +2, 0x0046D8E3 +2, 0x0046D9A7 +2, 0x0047B830 +2, 0x0049A458 +2, 0x004E5EB9 +2, 0,
                      0,
/* ready sound */     0,   0x0048F478 +4, 0,
                      0,
/* what snd start */  0,   0x0047BE12 +4, 0x0048EA4F +4, 0,
                      0,
/* what snd end */    0,   0x0047BF36 +4, 0x0048EA58 +4, 0,
                      0,
/* piss snd start */  0,   0x0048EA26 +4, 0,
                      0,
/* piss snd end */    0,   0x0048EA33 +4, 0,
                      0,
/* yes snd start */   0,   0x0048EAB5 +4, 0,
                      0,
/* yes snd end */     0,   0x0048EAC4 +4, 0,
                      0,
/* SE placement box*/ 0,   0x00440338 +4, 0x00440370 +3, 0x004404B2 +3, 0x0044379E +3, 0x00443F82 +3, 0x0044662A +3, 0x004466ED +4, 0x004469A2 +4, 0x0045CEC0 +2, 0x0045E107 +4, 0x00463A1D +4, 0x00463A52 +4, 0x004644AA +3, 0x004670FE +4, 0x00467BE1 +3, 0x00469ECA +3, 0x00469F6A +3, 0x0046F46A +3, 0x0046F51E +3, 0x00473778 +4, 0x00473940 +3, 0x00473EFA +3, 0x00473FC0 +3, 0x004741AB +3, 0x00487A3A +3, 0x00487AA0 +3, 0x00487B5E +3, 0x00487D22 +3, 0x0048D774 +4, 0x0048D806 +3, 0x0048E059 +3,
                             0x0048E145 +3, 0x0048E26F +4, 0x0049D7E5 +4, 0x004A0B85 +4, 0x004A4774 +3, 0x004A48AC +3, 0x004A49BF +3, 0x004A4BEA +3, 0x004C8367 +4, 0x004D7033 +3, 0x004E3FCC +3, 0x004E697A +3, 0x004E698E +3, 0x00413E6B +3, 0x004E9C78 +3, 0x004EBE22 +4, 0x004148FA +3, 0,
                      2,   0x00440399 +4, 0x004403CB +3, 0x004404B9 +3, 0x004437AE +3, 0x00443D52 +4, 0x00443F71 +3, 0x00446644 +3, 0x00446710 +4, 0x004469BA +4, 0x0045E0DC +4, 0x00463A2C +4, 0x00463A62 +4, 0x004644A3 +3, 0x004670F0 +4, 0x00467BE8 +3, 0x00469EDB +3, 0x00469F7B +3, 0x0046F463 +3, 0x0046F517 +3, 0x00473785 +4, 0x0047392A +3, 0x00473F0A +3, 0x00473FD5 +3, 0x004741C2 +3, 0x00487A56 +3, 0x00487B9D +3, 0x00487D1B +3, 0x0048D77D +4, 0x0048D815 +3, 0x0048E06E +3, 0x0048E15A +3,
                             0x0048E28D +4, 0x0049D7F9 +4, 0x004A0BB0 +4, 0x004A0BB8 +3, 0x004A476E +2, 0x004A48A6 +2, 0x004A49B9 +2, 0x004A4BE4 +2, 0x004C838F +4, 0x004C8397 +3, 0x004D703A +3, 0x004E3FC5 +3, 0x004E69A0 +3, 0x004E9C71 +3, 0x004EBE17 +4, 0x00413E7A +3, 0,
                      536, 0x0045DC56 +3, 0,
                      538, 0x0045DC2A +3, 0,
                      752, 0x00473DB6 +1, 0,
                      0,
/* addon position */  0,   0x00440358 +4, 0x00446664 +3, 0x00463A3D +4, 0x0048E298 +4, 0x004E6981 +3, 0,
                      2,   0x004403B6 +4, 0x0044667D +3, 0x00463A47 +4, 0x0048E2AB +4, 0,
              /*-424*/424,   0x0048DD61 +3, 0x0048DE3B +3, 0x0048E0F0 +3, 0,
              /*-422*/426,   0x0048DD42 +3, 0x0048DE42 +3, 0x0048E102 +3, 0,
                      0,
/* unit size */       0,   0x00402033 +3, 0x00402075 +3, 0x00402B1D +3, 0x0045323E +3, 0x00402B65 +4, 0x0042D6BF +3, 0x0042D6FB +3, 0x0042D819 +3, 0x0042D9B9 +3, 0x0042DA1B +3, 0x0042DA57 +3, 0x0042DAA3 +3, 0x0042DADF +3, 0x0046365A +3, 0x004642A9 +3, 0x00464318 +3, 0x0042E1E7 +3, 0x00467C2E +3, 0x00468BA5 +3, 0x0042E29E +3, 0x0046A3EC +4, 0x0046A77A +3, 0x0046B457 +3, 0x00473576 +3, 0x004735AE +3, 0x004737A5 +4, 0x004762E6 +3, 0x0042F16C +3, 0x0042F1B5 +4, 0x0048ADCD +3, 0x0049A98B +3,
                             0x0049CDDD +3, 0x0049CE7F +3, 0x0049CECC +3, 0x0049D08B +3, 0x0049D1D8 +4, 0x0049D1E0 +3, 0x0049D473 +3, 0x0049D581 +3, 0x0042FF5D +1, 0x0049DF17 +3, 0x004A0B0A +4, 0x00404824 +3, 0x004C8307 +4, 0x0040486D +4, 0x004E2571 +4, 0x004E263F +4, 0x004E41B7 +3, 0x004E454F +3, 0x004E8DBF +3, 0x004E8E29 +3, 0x004E8F9F +3, 0x004E9001 +3, 0x004E9201 +3, 0x004E9256 +3, 0x004E9325 +4, 0x004E932D +3, 0x004E940F +3, 0x004E94E1 +3, 0x004F199B +3, 0x004F1A41 +3, 0x004F1A7A +3,
                             0x004F21B8 +3, 0x004F2388 +3, 0x004F2B0B +3, 0x004309D8 +4, 0x00430C6F +3, 0x00430CA1 +3, 0x00430D52 +3, 0x00430DA4 +3, 0x00430DE9 +4, 0x00430E7E +3, 0x00430EB9 +4, 0x00430F40 +3, 0x00430F83 +4, 0x00430FB3 +3, 0x004220DD +3, 0x00401FA7 +3, 0,
                      2,   0x00401FE0 +3, 0x004532A0 +3, 0x00402B8B +4, 0x0042D6F1 +3, 0x0042D839 +3, 0x0042DA4D +3, 0x0042DAF6 +3, 0x0042E213 +3, 0x00467C4D +3, 0x0042E28E +3, 0x00468BC6 +3, 0x0046A3F4 +4, 0x0046A773 +3, 0x0046B49E +3, 0x004735C8 +3, 0x004737B4 +4, 0x0042F164 +4, 0x0042F1DB +4, 0x0049A974 +3, 0x0049D591 +3, 0x0049DF39 +3, 0x004A0B40 +4, 0x004C833A +4, 0x004E2587 +4, 0x004E2655 +4, 0x00404893 +4, 0x004E8DB1 +4, 0x004E9075 +3, 0x004E90CD +3, 0x004E913E +3, 0x004E9193 +3,
                             0x004F19AF +3, 0x004F21CC +3, 0x004F2396 +3, 0x004F2B3F +3, 0x00430A4B +4, 0x00430CB8 +3, 0x00430DDB +4, 0x00430EAE +4, 0x00430F74 +4, 0,
                      4,   0x00401FBE +3, 0x00401FD3 +3, 0x00402B56 +4, 0x00453267 +3, 0x0042D6B7 +4, 0x0042D6E3 +3, 0x0042D822 +3, 0x0042DA13 +4, 0x0042DA3F +3, 0x0042DAD5 +3, 0x0042E1F8 +3, 0x00467C3E +3, 0x00468BB0 +3, 0x0042E297 +3, 0x0046A4A3 +3, 0x0046A78C +3, 0x0046B46F +3, 0x004735A7 +3, 0x004737C0 +4, 0x0042F1A1 +4, 0x0049A984 +3, 0x0049CDD6 +3, 0x0049D570 +3, 0x0049DF25 +3, 0x004A0AFF +4, 0x004C82F6 +4, 0x0040485D +4, 0x004E259D +4, 0x004E266B +4, 0x004E4556 +3, 0x004E8F98 +3,
                             0x004E8FFA +3, 0x004E91FA +3, 0x004E924F +3, 0x004F19BE +3, 0x004F21DB +3, 0x004F238F +3, 0x004F2AF5 +3, 0x00430C67 +4, 0x00430C97 +3, 0x00430D4A +4, 0x00430DF1 +4, 0x00430EC1 +4, 0x004220D5 +4, 0x00430F8B +4, 0,
                      6,   0x00401FF0 +3, 0x004532B7 +3, 0x00402B7B +4, 0x0042D6EA +3, 0x0042D842 +3, 0x0042DA46 +3, 0x0042DAEF +3, 0x0042E227 +3, 0x0042E287 +3, 0x00467C5E +3, 0x00468BBF +3, 0x0046A4AA +3, 0x0046A795 +3, 0x0046B4B6 +3, 0x004735C1 +3, 0x004737C8 +4, 0x004762D9 +4, 0x0042F1CB +4, 0x0048ADC5 +4, 0x0049A96D +3, 0x0049CEC4 +4, 0x0049D07B +4, 0x0049D1CC +4, 0x0049D577 +3, 0x0049DF46 +3, 0x004A0B35 +4, 0x004C832F +4, 0x004E25B0 +4, 0x004E267E +4, 0x00404883 +4, 0x004E906E +3,
                             0x004E90C6 +3, 0x004E9137 +3, 0x004E918C +3, 0x004E9311 +4, 0x004E9407 +4, 0x004E94D9 +4, 0x004F19D9 +3, 0x004F1A39 +4, 0x004F21EF +3, 0x004F239D +3, 0x004F2B2A +3, 0x00430C5F +4, 0x00430CB1 +3, 0x00430D9C +4, 0x00430DD0 +4, 0x004220CB +4, 0x00430E76 +4, 0x00430EA3 +4, 0x00430F38 +4, 0x00430F69 +4, 0,
                      112,  0x00464871 +2, 0,
                      114,  0x00464770 +3, 0x0046485B +3, 0,
                      584,  0x00465D6A +3, 0,
                      586,  0x00465D91 +3, 0,
                      588,  0x00465D77 +3, 0,
                      590,  0x00465D9E +3, 0,
                      840,  0x004EB432 +2, 0,
                      842,  0x004EB419 +3, 0,
                      844,  0x004EB43C +2, 0,
                      846,  0x004EB424 +3, 0,
                      1048, 0x0049D6C8 +2, 0,
                      1050, 0x0049D6DE +3, 0,
                      1052, 0x0049D6C3 +1, 0,
                      1054, 0x0049D6D8 +2, 0,
                      ARRAY_END, 0x0042FF21 +1, 0,
                      0,
/* portrait */        0,   0x0045E323 +4, 0x0045EDF7 +4, 0x0045EFFD +4, 0x0046CF65 +4, 0,
                      156, 0x0045E342 +2, 0x0045EE16 +1, 0x0045F01C +1, 0x0046CF84 +2, 0,
                      304, 0x0045E353 +2, 0x0045EE27 +1, 0x0045F02D +1, 0x0046CF9A +2, 0,
                      0,
/* mineral cost */    0,   0x004237B2 +3, 0x00423882 +3, 0x00423C72 +3, 0x00423D32 +3, 0x00423DF2 +3, 0x00423ED2 +3, 0x0043FBEA +4, 0x00441CA4 +4, 0x004487BE +3, 0x0042CDFF +4, 0x0042CE76 +3, 0x0042CEC8 +3, 0x0042D149 +3, 0x00459514 +4, 0x00459538 +3, 0x0045D0F9 +3, 0x0045D42C +3, 0x0045E15B +4, 0x00466D1F +3, 0x00467050 +4, 0x0048DEF5 +4, 0x004BF079 +1, 0x004BF3E9 +1, 0x004E69F4 +3, 0x004344FA +3, 0x00436667 +4, 0,
                      122, 0x00441CAC +3, 0,
                      168, 0x0043FB28 +3, 0,
                      2*228, 0x004CAC12 +3, 0x004CADD2 +3, 0, // CHK load
                      0,
/* gas cost */        0,   0x004237A5 +3, 0x00423875 +3, 0x00423C65 +3, 0x00423D25 +3, 0x00423DE5 +3, 0x00423EC5 +3, 0x0043FBE2 +4, 0x00441CB5 +4, 0x004487C5 +3, 0x0042CE11 +4, 0x0042CE97 +3, 0x0042CECF +3, 0x0042D150 +3, 0x0045951E +4, 0x00459531 +3, 0x0045D100 +3, 0x0045D44D +3, 0x0045E163 +4, 0x00466D29 +3, 0x00467058 +4, 0x0048DF05 +4, 0x004BF08D +1, 0x004BF3FD +1, 0x004E69E7 +3, 0x00434501 +3, 0x0043666F +4, 0,
                      122, 0x00441CBD +3, 0,
                      168, 0x0043FB2F +3, 0,
                      2*228, 0x004CAC21 +3, 0x004CADE1 +3, 0, // CHK load
                      0,
/* build time */      0,   0x0045D227 +3, 0x0045D54F +4, 0x0045D5E2 +4, 0x0045E069 +4, 0x0046315F +4, 0x00466A13 +4, 0x0047B184 +4, 0x0047B6DF +4, 0x0049EF43 +4, 0x004BF065 +1, 0x004BF3D5 +1, 0,
                      76,  0x004631A5 +3, 0,
                      86,  0x00463191 +3, 0x0046319A +3, 0,
                      122, 0x00463186 +3, 0,
                      134, 0x0046317D +3, 0,
                      2*228, 0x004CAC03 +3, 0x004CADC3 +3, 0, // CHK load
                      0,
/* unknown 1 */       0,   0x0046E129 +4, 0x0046E152 +3, 0x0046E15B +3, 0x0046E173 +4, 0x0046E18E +4, 0x0046E2A8 +4, 0x0046E2B9 +4, 0x0048E220 +4, 0x0048E23B +4, 0,
                      0,
/* SE group flags */  0,   0x004235DD +2, 0x004236BA +2, 0x004246DA +2, 0x00424714 +2, 0x00424834 +2, 0x00440414 +2, 0x00425261 +2, 0x00426035 +2, 0x00426107 +2, 0x0042660E +2, 0x004267F1 +2, 0x00426B78 +2, 0x0042712F +2, 0x00427352 +2, 0x004275A6 +2, 0x00427746 +2, 0x0042CFD0 +2, 0x00457B71 +2, 0x00458C25 +2, 0x004594B7 +2, 0x0045F804 +2, 0x0046086C +2, 0x00462EC9 +2, 0x00464E75 +2, 0x0046744E +2, 0x00467A45 +2, 0x00468463 +2, 0x0046F828 +2, 0x0046F8F1 +2, 0x00473A35 +2, 0x00473C25 +2,
                             0x00474504 +2, 0x004746DF +2, 0x0047B154 +2, 0x00488963 +2, 0x00488993 +2, 0x004889D9 +2, 0x00488B0C +2, 0x00488C3C +2, 0x00488DA6 +2, 0x0048E5C0 +2, 0x0048E71E +2, 0x0048E7B6 +2, 0x0048E7F5 +2, 0x0048EF6C +2, 0x0048EFF3 +2, 0x0048F091 +2, 0x0048F171 +2, 0x0048F337 +2, 0x0048F5BC +2, 0x0048F64C +2, 0x0048F6E7 +2, 0x0048F7D7 +2, 0x0048F9A4 +2, 0x0048F9C2 +2, 0x0048F9E0 +2, 0x00492742 +2, 0x0049295E +2, 0x004937C6 +2, 0x00494537 +2, 0x0049F0BF +2, 0x0049FD91 +2,
                             0x004C5412 +2, 0x004C5442 +2, 0x004C5472 +2, 0x004C6A1B +2, 0x004C6BE6 +2, 0x004C7046 +2, 0x004C76C6 +2, 0x004C878C +2, 0x004CBDC7 +2, 0x004CD8D0 +2, 0x004E7956 +2, 0x004E7ED0 +2, 0x004EC3CC +2, 0x00414194 +2, 0x00432483 +2, 0x00432491 +2, 0x004324A8 +2, 0x004324BB +2, 0x004337C3 +2, 0x0043524C +2, 0,
                      0,
/* supply provided */ 0,   0x00424820 +2, 0x00425935 +2, 0x004276A5 +3, 0x004279B4 +2, 0x00488DB1 +3, 0x00488DC9 +3, 0x00488DE1 +3, 0x00433810 +3, 0x0043381B +3, 0,
                      0,
/* supply required */ 0,   0x0043FBF5 +2, 0x0042CE22 +2, 0x0042CF7E +3, 0x004594CD +3, 0x004594E6 +3, 0x004594FB +3, 0x00488C64 +2, 0x00488C91 +2, 0x00488CBB +3, 0x00488CDC +3, 0x00436661 +2, 0,
                      38,  0x0042CFC5 +3, 0,
                      84,  0x0043FB36 +1, 0,
                      0,
/* space required */  0,   0x00424C81 +2, 0x00474EE7 +2, 0x004E6BE8 +2, 0x004E6E8C +2, 0x004E6EB7 +3, 0x004E6ED0 +3, 0x004E71D3 +3, 0x004E721E +3, 0x004E726A +3, 0x004E72B6 +3, 0,
                      0,
/* space provided */  0,   0x004394D1 +2, 0x0043BF7B +2, 0x00424A5C +2, 0x00424BED +2, 0x00429027 +2, 0x00429043 +3, 0x004608A9 +2, 0x0046D712 +2, 0x00474EE1 +2, 0x0049A4D3 +2, 0x0049FE1A +2, 0x004C6B6A +2, 0x004C6FFC +3, 0x004C7E9C +2, 0x004C7FD7 +2, 0x004E6BCD +2, 0x004E6BEE +2, 0x004E6C97 +3, 0x004E6D08 +3, 0x004E6E96 +3, 0x004E6F55 +2, 0x004E72EB +3, 0x004E78EC +3, 0x004E7D34 +2, 0x004E7E9F +3, 0x004EB1B3 +2, 0x004EB356 +2, 0x004F3ACE +2, 0x00401F21 +3, 0,
                      125, 0x0043ECCC +3, 0,
                      0,
/* build score */     0,   0x00488E53 +4, 0x00488E99 +4, 0x00488EBF +4, 0,
                      82,  0x0045DAB9 +3, 0,
                      0,
/* destroy score */   0,   0x004759F4 +4, 0x00488BA6 +4, 0x00488BC2 +4, 0,
                      0,
/* map string */      0,   0x0047B09A +4, 0x0042F3DD +4, 0x004BF0A1 +1, 0x004BF411 +1, 0,
                      164, 0x0042F3A1 +3, 0,
                      2*228, 0x004CAC30 +3, 0x004CADF0 +3, 0, // CHK load
                      0,
/* BW flag */         0,0,0, // Unused
/* SE avail flags */  0,   0x0049713F +3, 0x004A0AF1 +3, 0,
                      1,   0x004CD36C +3, 0,
                      2,   0x00497166 +3, 0,
                      4,   0x0049718D +3, 0,
                      6,   0x004971B4 +3, 0,
                      8,   0x004971DB +3, 0,
                      10,  0x00497202 +3, 0,
                      0,0};


// Units.dat Arrays:
void* unit_newArrs[7] = {NULL}; // one for each of the following:

struct {
  s32 offset;
  s32 size;
  s32 newOfs;
} unit_copyTables[] = {
               {/* UnitTable =  */ 0x005187e8, 3000,  0x00582324},   // replaces All Unit Count Table, Completed Unit Count Table
               {/* StatTable =  */ 0x005193a0, 2736,  0x005878A4} }; // replaces Unit Killed Count Table, Death Table

u32 unit_buttonSets[] = {0, 0x004591ED +3, 0,
                         4, 0x00458C51 +2, 0x00458C5A +2, 0,
                         8, 0x00458C62 +3, 0x00458C6B +3, 0,
                         0};

u32 unit_statusInfo[] = {4, 0x00458182 +3, 0,
                         8, 0x0045819F +3, 0,
                         0};

               // Unit ID, ptr, ptr, ptr, ..., 0, ...
u32 unit_AllCount[] = {0,   0x004363E3 +3, 0x0043FB98 +3, 0x00447863 +3, 0x0045B140 +3, 0x0045BB52 +3, 0x0045BB87 +3, 0x0045C452 +3, 0x0045F7D5 +1, 0x0046D6D3 +2, 0x0046E536 +2, 0x0048888C +3, 0x00488C35 +3, 0x00488D31 +3, 0x00488D3C +3, 0x00488FA8 +1, 0,
                       5,   0x0045B149 +3, 0x0045C45B +3, 0,
                       14,  0x00434D74 +3, 0,
                       30,  0x0044786C +3, 0x0045B159 +3, 0x0045C469 +3, 0,
                       84,  0x0043FB0E +3, 0,
                       111, 0x0043B202 +2, 0,
                       142, 0x0043B20E +2, 0,
                       156, 0x00433410 +3, 0,
                       160, 0x0043B21A +2, 0,
                       0};

              // Unit ID, Player, ptr, ptr, ptr, ..., 0, ...
u32 unit_Complete[] = {0,   0,  0x00435A96 +3, 0x00436B6A +2, 0x00447AC3 +3, 0x0045B119 +3, 0x0045B940 +3, 0x0045F7C4 +1, 0x0046D685 +3, 0x0046D6CD +2, 0x0046DA37 +3, 0x0046E4F2 +3, 0x0046E530 +2, 0x0046E553 +3, 0x004888AC +3, 0x00488D8F +3, 0x00488D9B +3, 0x00488ECF +3, 0x00488EDB +3, 0,
                       5,   0,  0x0043B510 +2, 0x00447ACC +3, 0x0045B122 +3, 0x0045B949 +3, 0,
                       11,  0,  0x00437260 +2, 0x0043A7CC +2, 0x00445465 +2, 0,
                       30,  0,  0x00447ADF +3, 0x0045B132 +3, 0x0045B95E +3, 0,
                       32,  0,  0x0043ED46 +2, 0,
                       38,  0,  0x00436B29 +2, 0x00436B50 +2, 0,
                       43,  0,  0x00436B1A +2, 0,
                       42,  0,  0x00437277 +2, 0x0043A7E3 +2, 0x0044546F +2, 0,
                       45,  0,  0x0043B518 +2, 0,
                       65,  0,  0x0043B255 +3, 0x0043B35B +2, 0x0043B397 +3, 0x0043B3D5 +3, 0x0043B412 +3, 0x0043B44F +3, 0x0043B48C +3, 0x0043B4C1 +3, 0x0043B520 +2, 0,
                       66,  0,  0x0043B2C1 +2, 0x0043B308 +2, 0x0043B4F9 +2, 0,
                       69,  0,  0x00437256 +2, 0x0043A7C2 +2, 0x00445459 +2, 0,
                       70,  0,  0x0043B2C7 +2, 0x0043B30E +2, 0,
                       105, 11, 0x004EB3E1 +1, 0,
                       106, 0,  0x00441331 +2, 0,
                       115, 0,  0x0043FAE6 +3, 0,
                       125, 0,  0x00436B70 +2, 0x0043C2A9 +3, 0x0043ED4C +2, 0x00440747 +3, 0,
                       131, 0,  0x0044131D +2, 0,
                       132, 0,  0x0044133B +2, 0,
                       133, 0,  0x00441345 +2, 0,
                       135, 0,  0x0043B34F +2, 0,
                       144, 0,  0x00436B20 +2, 0,
                       146, 0,  0x00436B4A +2, 0x0043B4EA +2, 0,
                       154, 0,  0x00441327 +2, 0,
                       156, 0,  0x00433417 +3, 0,
                       176, 11, 0x00442F73 +1, 0x004432D3 +2, 0,
                       177, 11, 0x00442F7C +1, 0x004432DD +2, 0,
                       178, 11, 0x00442F85 +1, 0x004432E7 +2, 0,
                       202, 11, 0x00476237 +1, 0,
                       0};

u32 unit_Killed[] = {0x0046056C +3, 0x00488BE2 +3, 0};
u32 unit_Deaths[] = {0x0046044C +3, 0x00488B65 +3, 0x004C5BDC +3, 0x004C5BEC +3, 0x004C5BFA +3, 0x004C5D75 +3, 0x004C5EC6 +3, 0};
u32 unit_Available[] = {0x0046E255 +3, 0x004CCCDC +1, 0};

               // {factor, offset, ptr, ptr, ptr, ....}
s32 unit_AIStrength[] = {0, 0,  0x00431100 +3, 0x004314C2 +3, 0x00431622 +2, 0x004316E6 +3, 0x004316FC +3, 0x00439E08 +3, 0x0043E791 +3, 0x0043F2C8 +3, 0,
                         0, -4, 0x0043B5B7 +3, 0,
                         1, 0,  0x004310F0 +3, 0x004314D1 +3, 0x00439E3B +3, 0x0043E79A +3, 0x0043F2D1 +3, 0,
                         1, -4, 0x0043B5BE +3, 0,
                         0,0};

               // Player, Offset, ptr, ptr, ptr, ..., 0
s32 unit_AIStruct[] = {0,  0,    0x0043EC2A +2, 0x0043EC41 +2, 0x0043FB3F +2, 0x0043FBFF +2, 0x0043FC0D +2, 0x00447596 +1, 0x004475D2 +2, 0x00447688 +1, 0x004476D6 +1, 0x004479C0 +2, 0x00447BC3 +2, 0x00447D0F +2, 0x00447DE9 +2, 0x00447E03 +2, 0x00447E76 +1, 0x0044800F +1, 0x00448252 +1, 0x0043623C +1, 0x004488A6 +2, 0x0043668C +2, 0x0043669E +2, 0x0043AB61 +2, 0x0043AB78 +2, 0,
                       0,  4,    0x0043EC30 +2, 0x0043EC4F +2, 0x0043FB45 +2, 0x0043FB50 +2, 0x0043FC07 +2, 0x0043FC18 +2, 0x004475BB +2, 0x00447626 +2, 0x00447DEF +2, 0x00447E0C +2, 0x00436692 +2, 0x004366C2 +2, 0x0043AB67 +2, 0x0043AB86 +2, 0,
                       0,  8,    0x0043EC47 +2, 0x0043EC55 +2, 0x0043FB59 +2, 0x0043FB63 +2, 0x0043FC1E +2, 0x0043FC2C +2, 0x00447DFD +2, 0x00447E12 +2, 0x004366A4 +2, 0x004366B4 +2, 0x0043AB7E +2, 0x0043AB8C +2, 0,
                       0,  12,   0x00447538 +2, 0x00447789 +2, 0x00447797 +2, 0x00448712 +2, 0x00448772 +2, 0x0044885E +2, 0x004F39F7 +2, 0,
                       0,  16,   0x0044754A +2, 0x00447695 +1, 0x00447791 +2, 0x004477A2 +2, 0x0044871C +2, 0x0044877C +2, 0x00448868 +2, 0x004F3A43 +2, 0,
                       0,  20,   0x00447559 +2, 0x00448731 +2, 0x00448791 +2, 0x00448877 +2, 0,
                       0,  25,   0x004348DE +3, 0,
                       0,  26,   0x0043473B +3, 0x00434912 +3, 0x0043492A +3, 0x00434E85 +3, 0x00447586 +3, 0x00434FFD +3, 0x0043513B +3, 0x00435F27 +3, 0x004345D3 +3, 0x00434683 +3, 0,
                       0,  28,   0x0043472B +2, 0x00434908 +2, 0x00434E8E +2, 0x00447576 +2, 0x0043508E +2, 0x0043607B +2, 0x004360C8 +2, 0x004360EC +2, 0,
                     //0,  280,  0x004CF125 +2, 0, // Appears to be some constant 0x00690000 ?
                     //0,  283,  0x004CF258 +3, 0, // Appears to be some constant 0x00690003 ?
                       0,  528,  0x004348D4 +2, 0,
                       0,  529,  0x00434A05 +2, 0x00434A34 +2, 0x00434AE7 +2, 0x00446A52 +2, 0x00446A91 +2, 0x00434B1A +2, 0x00434B5A +2, 0x00434BC2 +2, 0x00434BFB +2, 0x00446F76 +2, 0x00446F96 +2, 0x00434F14 +2, 0x00434F54 +2, 0x00448957 +2, 0x00448963 +2, 0,
                       0,  530,  0x00446E56 +3, 0x00446EAC +2, 0x0045C1C0 +2, 0,
                       0,  531,  0x0043B9F1 +2, 0x00446B8C +2, 0x00446BA6 +2, 0x00446BB9 +2, 0x00446BE6 +2, 0x0045C39F +2, 0,
                       0,  532,  0x00446E3C +2, 0x00446E5D +2, 0x00446E8D +2, 0x0045C1DA +2, 0x004A186C +2, 0,
                       0,  536,  0x00431B64 +2, 0x0043BB4A +3, 0x0043BBB8 +2, 0x0043BBDA +2, 0x0043C5A8 +2, 0x0043D388 +2, 0x0043D3A8 +3, 0x0043D48B +2, 0x0043D589 +2, 0x0043D5A9 +3, 0x0043DE66 +3, 0x0043E147 +2, 0x0043E4F3 +2, 0x0043E5DD +2, 0x0043E68C +3, 0x0043E71B +2, 0x0043E722 +2, 0x0043E7F0 +2, 0x0043EB23 +1, 0x0043ED81 +2, 0x0043EDB6 +2, 0x0043F27B +2, 0x0043F2E4 +2, 0x0043F508 +2, 0x0043F598 +2, 0x0043F735 +2, 0x0043FA7A +3, 0x0043FA9E +3, 0x0043FAC6 +2, 0x0043FB9F +2, 0x0043FBD0 +2,
                                   0x0043FE1A +2, 0x0044025D +2, 0x00441529 +2, 0x00441BCF +3, 0x004426DF +2, 0x0044277F +2, 0x0044285F +2, 0x00442954 +2, 0x004429CF +2, 0x00442BCF +2, 0x00442C54 +2, 0x00442CCF +2, 0x00443A2E +2, 0x00445371 +2, 0x004462C2 +2, 0x004467C1 +2, 0x0043383D +2, 0x00446BCD +2, 0x00446C36 +3, 0x00446C58 +2, 0x00446C76 +3, 0x00446C98 +2, 0x00446CBD +2, 0x00446CD6 +3, 0x00446D26 +3, 0x00446D49 +2, 0x00446D78 +3, 0x00446D9C +3, 0x00446DF6 +3, 0x00446E16 +2, 0x00446E1D +2,
                                   0x00446EF6 +2, 0x00446F18 +2, 0x00446F36 +2, 0x00446F58 +2, 0x00446FA6 +3, 0x00446FC6 +2, 0x00446FCD +2, 0x00446FE6 +2, 0x00446FED +2, 0x004470A1 +2, 0x00434EEA +2, 0x004472A6 +2, 0x0044765C +2, 0x0043605A +2, 0x004485DD +2, 0x004485E4 +2, 0x004485F2 +2, 0x004485F9 +2, 0x00436338 +2, 0x0044894E +2, 0x004365DB +2, 0x0045B4F4 +2, 0x0045B516 +2, 0x0045B558 +2, 0x0045B89F +2, 0x0045BCA2 +2, 0x0045BCF7 +2, 0x0045BCFE +2, 0x0045BD12 +2, 0x0045BD19 +2, 0x0045BD2D +2,
                                   0x0045BD34 +2, 0x0045BD48 +2, 0x0045BD4F +2, 0x0045C0FF +2, 0x0045C106 +2, 0x0045C11A +2, 0x0045C121 +2, 0x0045C200 +2, 0x0045C207 +2, 0x0045C384 +2, 0x004630FA +2, 0x004A12CF +2, 0x004A14F9 +2, 0x004A1567 +2, 0x004A1607 +2, 0x004ABB2B +3, 0x00436F81 +2, 0x00437236 +2, 0x00433957 +3, 0x00437998 +2, 0x004390DB +2, 0x00439169 +2, 0x00439182 +2, 0x004391AA +2, 0x00439A6B +2, 0x00433EF0 +2, 0x00439C7C +2, 0x00439D12 +2, 0x0043A06F +2, 0x0043A07D +1, 0x0043A15A +2,
                                   0x004342E1 +2, 0x0043A212 +2, 0x0043A420 +2, 0x0043A48F +2, 0x0043A4B9 +2, 0x0043ADC3 +2, 0x0043ADE5 +2, 0x0043B06A +2, 0x0043B08A +3, 0,
                       0,  537,  0x00432394 +2, 0x0043B9FF +2, 0x0043C5A1 +2, 0x0043CA3F +2, 0x00446BAC +2, 0x00446BC6 +2, 0x00446BF0 +2, 0x00446CB6 +2, 0x004485C5 +2, 0x00436331 +2, 0x0045BA1E +2, 0x0045C37D +2, 0x0043ACA0 +2, 0,
                       0,  538,  0x00446CF6 +3, 0x00446D0D +3, 0x004483BA +2, 0x0045B59E +3, 0x0045C295 +3, 0,
                       0,  540,  0x00446EC6 +3, 0x00446EDD +3, 0x0045C1A4 +3, 0x0043A4DE +3, 0,
                       0,  542,  0x0043B5D9 +3, 0x0043BA82 +3, 0x0043E1FF +3, 0x0043E236 +3, 0x00447036 +3, 0x0044720B +3, 0x00447214 +3, 0x0044817E +3, 0x0045BCD7 +3, 0x0045C094 +3, 0x00439B0E +3, 0x0043ABDB +3, 0x0043B0E2 +3, 0x0043B1D7 +3, 0,
                       0,  544,  0x00446DB6 +3, 0x00446DC0 +2, 0x00446DE7 +3, 0x004338D7 +3, 0x004338ED +3, 0x0045B9AB +3, 0,
                       0,  546,  0x00437B5A +3, 0x00447006 +3, 0x0044701C +2, 0x0045C0EB +2, 0x004390E2 +3, 0x0043A16A +4, 0x0043A17B +4, 0,
                       0,  547,  0x0043F261 +3, 0x0043FA86 +2, 0x0043FA92 +2, 0x00446D66 +3, 0x00446D84 +2, 0x00446D90 +2, 0,
                       0,  548,  0x0043E6B9 +2, 0x0043F378 +2, 0x004470D6 +2, 0x0044710C +2, 0x0044840D +2, 0x00448642 +2, 0,
                       0,  552,  0x0043BA90 +2, 0x00447096 +2, 0x004470C5 +2, 0x004471AC +2, 0x004471CE +2, 0x004471ED +2, 0x00447205 +2, 0x00448188 +2, 0x0045BCDE +2, 0x0045BDA5 +2, 0x0045C09B +2, 0x00439AEA +2, 0x00439B02 +2, 0x0043B1DE +2, 0,
                       0,  556,  0x0043E0D3 +2, 0x0043E22F +2, 0x00447126 +2, 0x00447136 +3, 0x00448969 +2, 0x00448975 +2, 0,
                       0,  557,  0x00447146 +2, 0x00447156 +2, 0x0044897B +2, 0x00448987 +2, 0x00492B1A +2, 0x004A13D8 +2, 0,
                       0,  558,  0x00447176 +2, 0x00447186 +2, 0x0044898D +2, 0x00448999 +2, 0x0043ABC5 +2, 0x0043AD36 +2, 0,
                       0,  559,  0x00447663 +2, 0x00447676 +3, 0x00447A89 +2, 0x00447E7D +1, 0x0045BCA9 +2, 0x0045C7B4 +2, 0x0045C7FB +2, 0,
                       0,  560,  0x0043B59E +2, 0x0043E1EE +2, 0x00447059 +1, 0x0044707C +4, 0x00447226 +1, 0x0044724F +4, 0x0044725F +2, 0x0044727B +3, 0x00448173 +2, 0x0045BCC9 +2, 0x0045C086 +2, 0x00437F31 +1, 0x00438061 +2, 0x0043AC54 +3, 0x0043AC5B +2, 0x0043B1C4 +2, 0x0043B596 +3, 0,
                       0,  688,  0x0043F222 +2, 0x00447366 +1, 0x00447376 +2, 0x004474A8 +2, 0x00447966 +2, 0x0045BEF5 +2, 0x0043AE3A +2, 0,
                       0,  728,  0x0043F217 +2, 0x00447356 +1, 0x00447380 +2, 0x00447458 +2, 0x00447946 +2, 0x0045BF25 +2, 0x0043AE4A +2, 0,
                       0,  768,  0x0043F245 +2, 0x00447346 +1, 0x0044738A +2, 0x00447408 +2, 0x00447926 +2, 0x0045BF55 +2, 0x0043AE54 +2, 0,
                       0,  808,  0x0043F23A +2, 0x00447336 +1, 0x00447394 +2, 0x004473B8 +2, 0x00447906 +2, 0x0045BF85 +2, 0x0043AE5E +2, 0,
                       0,  848,  0x0043ECE4 +2, 0x0043F1BC +1, 0x004472C6 +2, 0x00447326 +1, 0x004474CB +2, 0x004478E6 +2, 0x0045BFB5 +2, 0,
                       0,  888,  0x0043F19A +1, 0x00447316 +1, 0x0044747B +2, 0x004478C6 +2, 0x0045BFE5 +2, 0,
                       0,  928,  0x0043F1AF +1, 0x00447306 +1, 0x0044742B +2, 0x004478A6 +2, 0x0045C015 +2, 0,
                       0,  968,  0x0043F18D +1, 0x004472F6 +1, 0x004473DB +2, 0x00447886 +2, 0x0045C045 +2, 0,
                       0,  1008, 0x00446C1C +3, 0x00447839 +3, 0x0045C368 +3, 0,
                       0,  1022, 0x00434D63 +2, 0,
                       0+1,-20,  0x0043D302 +2, 0x0043D30A +2, 0x004477D4 +2, 0x004477DA +2, 0x0044781B +2, 0x00447B0E +2, 0x00447B16 +2, 0x00447EE0 +2, 0x00447F27 +2, 0x00448019 +2, 0x0044803B +2, 0x00448262 +1, 0x00448280 +1, 0x00463068 +2, 0x00463070 +2, 0x004A22C0 +2, 0x004A22C8 +2, 0x004A2861 +2, 0x004A2869 +2, 0,
                       0+1,-16,  0x0043C356 +1, 0x00446AE6 +2, 0x00446B18 +2, 0,
                       1,  536,  0x004ABB32 +3, 0,
                       1+1,-20,  0x00447F1F +2, 0x00447F6C +2, 0x00448041 +2, 0x00448061 +2, 0x00448285 +1, 0x004482A3 +1, 0,
                       2,  536,  0x004ABB39 +3, 0,
                       2+1,-20,  0x00447F64 +2, 0x00447FB1 +2, 0x00448067 +2, 0x00448087 +2, 0x004482A8 +1, 0x004482C6 +1, 0,
                       3,  536,  0x004ABB40 +3, 0,
                       3+1,-20,  0x00447FA9 +2, 0x00447FEE +2, 0x0044808D +2, 0x004480AD +2, 0x004482CB +1, 0x004482E9 +1, 0,
                       4,  536,  0x004ABB47 +3, 0,
                       4+1,-20,  0x004480B3 +2, 0x004480D3 +2, 0x004482EE +1, 0x0044830C +1, 0,
                       5,  536,  0x004ABB4E +3, 0,
                       5+1,-20,  0x004480D9 +2, 0x004480F9 +2, 0x00448311 +1, 0x0044832F +1, 0,
                       6,  536,  0x004ABB55 +3, 0,
                       6+1,-20,  0x004480FF +2, 0x0044811F +2, 0x00448334 +1, 0x00448352 +1, 0,
                       7,  536,  0x004ABB5C +3, 0,
                       7+1,-20,  0x00448125 +2, 0x00448141 +2, 0x0044814D +2, 0x00448357 +1, 0x0044837B +1, 0,
                       0,0,0};



/*{0x00582324,  // Unit Buttons Table -> Unit Count Table
                       0x005878A4}; // Unit Button Stat Table -> Unit Killed Count Table
                                    // Dat reqs and actual command cards should be handled by FG
*/


               // factor, add, size,       ptr, ptr, ptr, ...,  0,  ...
s32 unit_consts[] = { 1,  0, sizeof(u32),   0x004BF04C +1, 0x004BF3BC +1, 0x0049E1AA +2, 0x0046E24C +2, 0x00497223 +1, 0x004314D9 +2, 0x004316D7 +2, 0,
                      1,  0, sizeof(u16), 0x0047B090 +3, 0,
                      2,  0, sizeof(u32),   0x004BF038 +1, 0x004BF060 +1, 0x004BF074 +1, 0x004BF088 +1, 0x004BF09C +1, 0x004BF3A8 +1, 0x004BF3D0 +1, 0x004BF3E4 +1, 0x004BF3F8 +1, 0x004BF40C +1, 0x0046E165 +1, 0,
                      4,  0, sizeof(u32),   0x004BF024 +1, 0x004BF391 +1, 0x0043161C +2, 0x004316F6 +2, 0,
                      48, 0, sizeof(u32),   0x00488FA3 +1, 0,
                      
                  // AI struct sizes
                      // 228*1 + 0x404
                      1, 1024, sizeof(u32), 0x00431B5E +2, 0x0043238E +2, 0x00433837 +2, 0x004338D1 +2, 0x00433EEA +2, 0x004342DB +2, 0x004345CD +2, 0x0043467D +2, 0x00434725 +2, 0x004348CE +2, 0x004348FD +2, 0x004349FF +2, 0x00434A2E +2, 0x00434AE1 +2, 0x00434B14 +2, 0x00434B54 +2, 0x00434BBC +2, 0x00434BF5 +2, 0x00434D5D +2, 0x00434E7D +2, 0x00434F0A +2, 0x00434F4E +2, 0x00434FF6 +2, 0x00435135 +2, 0x00435F21 +2, 0x00436236 +2, 0x0043632B +2, 0x004365D5 +2, 0x00436686 +2, 0x00436F7B +2,
                                              0x00437230 +2, 0x00437992 +2, 0x00437DD8 +1, 0x00437F2B +2, 0x0043805B +2, 0x004390D5 +2, 0x00439163 +2, 0x0043917C +2, 0x004391A4 +2, 0x00439A65 +2, 0x00439AE4 +2, 0x00439AFC +2, 0x00439C70 +2, 0x00439D06 +2, 0x0043A064 +2, 0x0043A0C4 +1, 0x0043A154 +2, 0x0043A20C +2, 0x0043A41A +2, 0x0043A489 +2, 0x0043A4B3 +2, 0x0043A4D8 +2, 0x0043AB5B +2, 0x0043ABBF +2, 0x0043ADBD +2, 0x0043ADDF +2, 0x0043AE34 +2, 0x0043B062 +2, 0x0043B084 +2, 0x0043B0DC +2,
                                              0x0043B590 +2, 0x0043B9EB +2, 0x0043BB44 +2, 0x0043BBB2 +2, 0x0043BBD4 +2, 0x0043C350 +2, 0x0043C59B +2, 0x0043CA39 +2, 0x0043D2FC +2, 0x0043D380 +2, 0x0043D3A2 +2, 0x0043D485 +2, 0x0043D581 +2, 0x0043D5A3 +2, 0x0043DE60 +2, 0x0043E0CD +2, 0x0043E4ED +2, 0x0043E5D7 +2, 0x0043E684 +2, 0x0043E6B3 +2, 0x0043E715 +2, 0x0043E7FC +1, 0x0043EB97 +2, 0x0043EC24 +2, 0x0043ECDE +2, 0x0043F187 +2, 0x0043F194 +2, 0x0043F1A9 +2, 0x0043F1B6 +2, 0x0043F20D +2,
                                              0x0043F230 +2, 0x0043F272 +2, 0x0043F2DE +2, 0x0043F372 +2, 0x0043F502 +2, 0x0043F592 +2, 0x0043F72F +2, 0x0043FA72 +2, 0x0043FAC0 +2, 0x0043FE14 +2, 0x00440257 +2, 0x00441523 +2, 0x00441BC9 +2, 0x004426D9 +2, 0x00442779 +2, 0x00442859 +2, 0x0044294E +2, 0x004429C9 +2, 0x00442BC9 +2, 0x00442C4E +2, 0x00442CC9 +2, 0x00443A28 +2, 0x00445365 +2, 0x004462BC +2, 0x004467BB +2, 0x00446A4B +2, 0x00446A8B +2, 0x00446AE0 +2, 0x00446B12 +2, 0x00446B86 +2,
                                              0x00446BA0 +2, 0x00446BC0 +2, 0x00446BE0 +2, 0x00446C16 +2, 0x00446C30 +2, 0x00446C50 +2, 0x00446C70 +2, 0x00446C90 +2, 0x00446CB0 +2, 0x00446CD0 +2, 0x00446CF0 +2, 0x00446D07 +2, 0x00446D20 +2, 0x00446D40 +2, 0x00446D60 +2, 0x00446D70 +2, 0x00446DB0 +2, 0x00446DE0 +2, 0x00446DF0 +2, 0x00446E10 +2, 0x00446E36 +2, 0x00446E50 +2, 0x00446E86 +2, 0x00446EA6 +2, 0x00446EC0 +2, 0x00446ED7 +2, 0x00446EF0 +2, 0x00446F10 +2, 0x00446F30 +2, 0x00446F50 +2,
                                              0x00446F70 +2, 0x00446F90 +2, 0x00446FA0 +2, 0x00446FC0 +2, 0x00446FE0 +2, 0x00447000 +2, 0x00447016 +2, 0x00447030 +2, 0x00447050 +2, 0x00447090 +2, 0x004470D0 +2, 0x00447106 +2, 0x00447120 +2, 0x00447130 +2, 0x00447140 +2, 0x00447150 +2, 0x00447170 +2, 0x00447180 +2, 0x004471A6 +2, 0x004471C1 +2, 0x004471E6 +2, 0x004471FE +2, 0x00447220 +2, 0x00447259 +2, 0x004472A0 +2, 0x004472C0 +2, 0x004472F0 +2, 0x00447300 +2, 0x00447310 +2, 0x00447320 +2,
                                              0x00447330 +2, 0x00447340 +2, 0x00447350 +2, 0x00447360 +2, 0x00447370 +2, 0x004473B2 +2, 0x00447402 +2, 0x00447452 +2, 0x004474A2 +2, 0x00447532 +2, 0x00447570 +2, 0x00447580 +2, 0x00447590 +2, 0x004475B5 +2, 0x00447656 +2, 0x00447670 +2, 0x004476BA +2, 0x004476D0 +2, 0x00447783 +2, 0x004477CD +2, 0x00447814 +2, 0x00447832 +2, 0x00447880 +2, 0x004478A0 +2, 0x004478C0 +2, 0x004478E0 +2, 0x00447900 +2, 0x00447920 +2, 0x00447940 +2, 0x00447960 +2,
                                              0x004479BA +2, 0x00447A83 +2, 0x00447B08 +2, 0x00447BBD +2, 0x00447D09 +2, 0x00447DE3 +2, 0x00447E94 +1, 0x00448165 +2, 0x00448390 +2, 0x00448407 +2, 0x004485BF +2, 0x004485D7 +2, 0x004485EC +2, 0x0044863C +2, 0x0044870C +2, 0x0044876C +2, 0x00448858 +2, 0x004488A0 +2, 0x00448948 +2, 0x0045B4E8 +2, 0x0045B510 +2, 0x0045B552 +2, 0x0045B598 +2, 0x0045B899 +2, 0x0045BA18 +2, 0x0045BC9C +2, 0x0045BCC1 +2, 0x0045BCF1 +2, 0x0045BD0C +2, 0x0045BD27 +2,
                                              0x0045BD42 +2, 0x0045BD9F +2, 0x0045BEE9 +2, 0x0045BF1C +2, 0x0045BF49 +2, 0x0045BF7C +2, 0x0045BFA9 +2, 0x0045BFDC +2, 0x0045C009 +2, 0x0045C03C +2, 0x0045C07B +2, 0x0045C0E5 +2, 0x0045C0F9 +2, 0x0045C114 +2, 0x0045C19E +2, 0x0045C1BA +2, 0x0045C1D4 +2, 0x0045C1FA +2, 0x0045C28C +2, 0x0045C35F +2, 0x0045C377 +2, 0x0045C399 +2, 0x0045C7AC +2, 0x0045C7F5 +2, 0x00463062 +2, 0x004630F1 +2, 0x00492B14 +2, 0x004A12C9 +2, 0x004A13D2 +2, 0x004A14F3 +2,
                                              0x004A1561 +2, 0x004A1601 +2, 0x004A1864 +2, 0x004A22BA +2, 0x004A285B +2, 0x004F39F1 +2, 0x004F3A3D +2, 0,
                      
                      // 228*1 + 0x3F0
                      1, 1008, sizeof(u32), 0x00447E99 +2, 0,
                      
                      // (228 + 0x404) * 2
                      2, 2056, sizeof(u32), 0x00447683 +1, 0x00447E71 +1, 0,
                      
                      // (228 + 0x404) * 4
                      4, 4112, sizeof(u32), 0x00447FF4 +2, 0,
                      
                      // (228 + 0x404) * 8
                      8, 8224, sizeof(u32), 0x0043E801 +1, 0x00447FFA +2, 0x0044800A +1, 0x0044824D +1, 0,
                      
                      
                  // Code replacements (factor = 0 to set a constant value)
                      0, 0x75,       sizeof(u8),  0x0046E1DD, 0, // replace a jb with a jne
                      0, 0x9090,     sizeof(u16), 0x004C1C5D, 0, // nop req for only allowing training <= 105
                      
                      //0x004474F5  |. 81FE E4000000  CMP ESI,0E4
                      //0x004474FB  |. 73 2C          JNB SHORT Starcraf.00447529
                      0, 0x74,       sizeof(u8),  0x004474FB, 0, // replace jnb with a je
                      
                      0, 0xE4,       sizeof(u16), 0x00401E84 +2, 0, // None
                      0, (s32)0xC3C0950F, sizeof(u32), 0x00401E91, 0, // replace "sbb eax,eax \ inc eax \ retn" with "setne al \ retn"
                      
                      
                      0,0,0,0};




// Flingy Expand Data
// Expanded Flingy.dat ID stuff
// word instructions are 1 byte bigger, so single-instruction functions need to be added :(

// Replaces a bunch of INT3s between functions
#define TE_FUNC_AA   0x00454534
#define TE_FUNC_CC   0x00454D84
#define TE_FUNC_DA   0x00454DF2
// TE_FUNC_DD is the last instructions in TE_FUNC_DA
#define TE_FUNC_DD   (TE_FUNC_DA+5)

// Replace array access with function call
struct{
  u32 ofs;
  u8  bytes[3];
  u32 func;
} ThingyExpand[] = {{0x00454317, {0x90, 0x90, 0xE8}, TE_FUNC_AA}, // nop nop / call TE_FUNC_AA
                    {0x0049ED0B, {0x8B, 0xC3, 0xE8}, TE_FUNC_AA}, // mov eax,ebx / call TE_FUNC_AA
                    {0x004E9A10, {0x8B, 0xC2, 0xE8}, TE_FUNC_AA}, // mov eax,edx / call TE_FUNC_AA
                    {0x00463A71, {0x8B, 0xCF, 0xE8}, TE_FUNC_CC}, // mov ecx,edi / call TE_FUNC_CC
                    {0x0047B8F4, {0x8B, 0xC8, 0xE8}, TE_FUNC_CC}, // mov ecx,eax / call TE_FUNC_CC
                    {0x0048D756, {0x8B, 0xC8, 0xE8}, TE_FUNC_CC}, // mov ecx,eax / call TE_FUNC_CC
                    {0x0048DA8A, {0x8B, 0xC8, 0xE8}, TE_FUNC_CC}, // mov ecx,eax / call TE_FUNC_CC
                    {0x004683C6, {0x8B, 0xD1, 0xE8}, TE_FUNC_DD}, // mov edx,ecx / call TE_FUNC_DD
//                    {0x0047B854, {0xB2, 0, 0xE8}, TE_FUNC_DA}, // mov dl,0 / call TE_FUNC_DA // collides with GPTP hook getModifiedUnitTurnRadius in unit_speed.cpp
//                    {0x0047B8A4, {0xB2, 0, 0xE8}, TE_FUNC_DA}, // mov dl,0 / call TE_FUNC_DA // collides with GPTP hook getModifiedUnitAccelerationHook in unit_speed.cpp
                    {0x00497148, {0xB2, 0, 0xE8}, TE_FUNC_DA}, // mov dl,0 / call TE_FUNC_DA
                    {0x0049716F, {0xB2, 1, 0xE8}, TE_FUNC_DA}, // mov dl,1 / call TE_FUNC_DA
                    {0x00497196, {0xB2, 2, 0xE8}, TE_FUNC_DA}, // mov dl,2 / call TE_FUNC_DA
                    {0x004971BD, {0xB2, 3, 0xE8}, TE_FUNC_DA}, // mov dl,3 / call TE_FUNC_DA
                    {0x004971E4, {0xB2, 4, 0xE8}, TE_FUNC_DA}, // mov dl,4 / call TE_FUNC_DA
                    {0x0049720B, {0xB2, 5, 0xE8}, TE_FUNC_DA}, // mov dl,5 / call TE_FUNC_DA
                    0};

// New functions to expand movzx xxx,byte ptr instruction
struct{
  u32 ofs;
  u8  bytes[9];
} ThingyExpandFxns[] = {{TE_FUNC_AA, {0x0F, 0xB7, 0x04, 0x45, 0,0,0,0, 0xC3}}, // movzx eax,word ptr ds:[eax*2 + offset] / retn
                        {TE_FUNC_CC, {0x0F, 0xB7, 0x0C, 0x4D, 0,0,0,0, 0xC3}}, // movzx ecx,word ptr ds:[ecx*2 + offset] / retn
                        {TE_FUNC_DA, {0x0F, 0xB6, 0xD2, 0x03, 0xD0, 0x0F, 0xB6, 0x14, 0x55}}, // movzx edx,dl / add edx,eax / 
                        //{TE_FUNC_DD, {0x0F, 0xB6, 0x14, 0x55, 0,0,0,0, 0xC3}}, // movzx edx,word ptr ds:[edx*2 + offset] / retn
                        0};

// Overwrites units.dat replacement list for Graphics
unsigned int ThingyExpandUnits_r[] = {TE_FUNC_AA+4, TE_FUNC_CC+4, TE_FUNC_DD+4,  0};



};


namespace DatExt {

  void units_dat_doPatch(u32 newCount) {
    u32 i,j, offs;

    datTablePatch((DatLoad*)LoadTable::Units_Dat, unit_r);

    // Copy button & unit stuff to bigger memory (the now empty unit complete/deaths/etc. tables)
    //memoryPatch(unit_copyTables[0].newOfs, (u8*)unit_copyTables[0].offset, unit_copyTables[0].size);
    //memoryPatch(unit_copyTables[1].newOfs, (u8*)unit_copyTables[1].offset, unit_copyTables[1].size);
    memcpy((u8*)(unit_copyTables[0].newOfs), (u8*)unit_copyTables[0].offset, unit_copyTables[0].size);
    memcpy((u8*)(unit_copyTables[1].newOfs), (u8*)unit_copyTables[1].offset, unit_copyTables[1].size);

    // Load default values (I don't think FG does)
    BUTTON_SET* bunit = (BUTTON_SET*)(unit_copyTables[0].newOfs);
    UnitStatFuncArrayEntry* bstat = (UnitStatFuncArrayEntry*)(unit_copyTables[1].newOfs);
    for (i = 228; i < newCount; i++) {
      if (i < 250) { // Unselectable, unusable
        bstat[i].UnitStatCondFunc = bstat[4].UnitStatCondFunc;
        bstat[i].UnitStatActFunc = bstat[4].UnitStatActFunc;
      } else { // Normal
        bunit[i].connectedUnit = 0xFFFF; // Dunno what this is LOL
        bstat[i].unitId = i;
        bstat[i].UnitStatCondFunc = bstat[0].UnitStatCondFunc;
        bstat[i].UnitStatActFunc = bstat[0].UnitStatActFunc;
      }
    }

    // unit_buttonSets
    // - Null-terminated list of null-terminated lists of addresses
    // - First value in list is the value offset
    for (i = 0; unit_buttonSets[i] != 0 || i == 0; i++) {
      offs = unit_copyTables[0].newOfs + unit_buttonSets[i++];
      i += simpleReplace(&unit_buttonSets[i], offs);
    }

    // unit_statusInfo
    // - Null-terminated list of null-terminated lists of addresses
    // - First value in list is the value offset
    for (i = 0; unit_statusInfo[i] != 0 || i == 0; i++) {
      offs = unit_copyTables[1].newOfs + unit_statusInfo[i++];
      i += simpleReplace(&unit_statusInfo[i], offs);
    }


    // unit_AllCount
    unit_newArrs[0] = malloc(newCount * 12 * 4);
    // - Null-terminated list of null-terminated lists of addresses
    // - First value in list is the unit ID referenced
    for (i = 0; unit_AllCount[i] != 0 || i == 0; i++) {
      offs = (u32)unit_newArrs[0] + unit_AllCount[i++] * 12 * 4; // ID offset
      i += simpleReplace(&unit_AllCount[i], offs);
    }

    // unit_Complete
    unit_newArrs[1] = malloc(newCount * 12 * 4);
    // - Null-terminated list of null-terminated lists of addresses
    // - First value in list is the unit ID referenced, second value is the player ID
    for (i = 0; unit_Complete[i] != 0 || i == 0; i++) {
      offs = (u32)unit_newArrs[1] + (unit_Complete[i] * 12 + unit_Complete[i + 1]) * 4; // ID offset
      i += simpleReplace(&unit_Complete[i], offs);
    }

    // unit_Killed
    unit_newArrs[2] = malloc(newCount * 12 * 4);
    simpleReplace(unit_Killed, (u32)unit_newArrs[2]);

    // unit_Deaths
    unit_newArrs[3] = malloc(newCount * 12 * 4);
    simpleReplace(unit_Deaths, (u32)unit_newArrs[3]);

    // unit_Available
    unit_newArrs[4] = malloc(newCount * 12 * 4);
    simpleReplace(unit_Available, (u32)unit_newArrs[4]);

    // unit_AIStrength
    unit_newArrs[5] = malloc(newCount * 4 * 2);
    // - Zero-terminated list of zero-terminated lists
    j = 0;
    do {
      offs = (u32)unit_newArrs[5] + (unit_AIStrength[j] * newCount + unit_AIStrength[j + 1]) * 4; // factor * 12 + add
      j += simpleReplace((u32*)&unit_AIStrength[j + 2], offs);
      j += 3;
    } while (unit_AIStrength[j] != 0 || unit_AIStrength[j + 1] != 0);

    // unit_AIStruct
    unit_newArrs[6] = malloc((0x404 + newCount) * 8); // (0x404 + unit count) * 8 players
    // - Zero-terminated list of {Player, Offset, ptr, ptr, ptr, ..., 0}
    j = 0;
    do {
      offs = (u32)unit_newArrs[6] + unit_AIStruct[j] * (0x404 + newCount) + unit_AIStruct[j + 1]; // // player * (0x404 + entries) + offset
      j += simpleReplace((u32*)&unit_AIStruct[j + 2], offs);
      j += 3;
    } while (unit_AIStruct[j] != 0 || unit_AIStruct[j + 1] != 0);

    constReplace(unit_consts, newCount);

    // Apply 'newArrs' to appropriate scbwdata.h variables
    buttonSetTable_var = bunit;
    unitStatFuncs_var = bstat;
    unitAllCountTable_var = (UNITDEATHS*)unit_newArrs[0];
    unitCompleteTable_var = (UNITDEATHS*)unit_newArrs[1];
    unitKilledTable_var = (UNITDEATHS*)unit_newArrs[2];
    deathTable_var = (UNITDEATHS*)unit_newArrs[3];
    for (i = 0; i < PLAYER_COUNT; i++) {
      UnitAvailability_var->available[i] = (u8*)(unit_newArrs[4]) + newCount * i;
    }
    aiStrength_var = (u32*)unit_newArrs[5];
    AIScriptController_var = (AI_Main*)unit_newArrs[6]; // TODO: fix

    // Load flingy expand patch
    units_dat_flingyExpand();
  }



  void units_dat_flingyExpand() {
    int i;
    u32 offs;
    DatLoad* datTable = (DatLoad*)LoadTable::Units_Dat;

    // Loading default dat file?
    if (datTable[0].length == 1) {
      u8* src = (u8*)datTable[0].address;
      u16* dst;
      if ((u32)datTable[0].address == 0x006644F8) {
        datTable[0].address = malloc(datTable[0].entries * 2);
      }
      dst = (u16*)datTable[0].address;

      for (i = datTable[0].entries - 1; i >= 0; i--) {
        dst[i] = src[i];
      }

      // already patched?
      if (src == (u8*)dst) return;
    }

    // Apply patch

    offs = (u32)datTable[0].address;
    *(u32*)(&ThingyExpandFxns[0].bytes[4]) = offs;
    *(u32*)(&ThingyExpandFxns[1].bytes[4]) = offs;
    // Copy functions
    for (i = 0; ThingyExpandFxns[i].ofs != NULL; i++) {
      memoryPatch(ThingyExpandFxns[i].ofs, ThingyExpandFxns[i].bytes, 9);
    }
    i = 0xC3; // Retn
    memoryPatch(TE_FUNC_DD + 4, offs);
    memoryPatch(TE_FUNC_DD + 8, (u8*)&i, 1);

    // Replace assembly
    for (i = 0; ThingyExpand[i].ofs != 0; i++) {
      memoryPatch(ThingyExpand[i].ofs, ThingyExpand[i].bytes, 3);
      offs = ThingyExpand[i].func - ThingyExpand[i].ofs - 7; // Calculate relative offset
      memoryPatch(ThingyExpand[i].ofs + 3, offs);
    }

    // no longer necessary since address was loaded above
    //simpleReplace(ThingyExpandUnits_r, (u32)datTable[0].address);
  }

  void units_dat_unpatch() {
    for (int i = 0; i < 7; i++) {
      if (unit_newArrs[i] != NULL) {
        free(unit_newArrs[i]);
        unit_newArrs[i] = NULL;
      }
    }
  }

};
